<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>考试注意事项总结</title>
    <link href="/myblog/2023/10/15/%E8%80%83%E8%AF%95%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%E6%80%BB%E7%BB%93/"/>
    <url>/myblog/2023/10/15/%E8%80%83%E8%AF%95%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="一，前言"><a href="#一，前言" class="headerlink" title="一，前言"></a>一，前言</h2><p>由于最近备战CSP-J而集训，发现了一些实机考试时需要注意的一些事项，希望可以警醒自己同时不要让其他人掉坑。</p><h2 id="二，调整"><a href="#二，调整" class="headerlink" title="二，调整"></a>二，调整</h2><ol><li><p>调整自己的心态，不因之前某次模拟考失利或失误而有一种自暴自弃亦或是感觉自己不行的心理，要知道，模拟就是希望找到自己的不足，<strong>仅此而已</strong>。</p></li><li><p>调整自己的状态，提前在试机时适应键盘感觉，<strong>有问题及时和监考人员反应</strong>，要知道，监考人员是让你正常发挥的保证，而<strong>不是你的障碍</strong>。</p></li></ol><h2 id="三，注意"><a href="#三，注意" class="headerlink" title="三，注意"></a>三，注意</h2><ol><li><p>注意电脑有无问题。</p></li><li><p>注意自己的文件夹有无错误。</p></li><li><p>注意c++，头文件是否齐全（不必多，不<strong>能</strong>少）。</p></li><li><p>一定不能在考号文件夹中编译，<strong>一定不能！！！</strong>（不然运行后一直在后台运行删不掉，会爆零）</p></li></ol><p>注：若出现此类情况可以用以下方式处理：</p><p>（1）尽快保存<strong>最新版本的程序</strong>并在他处重建一个新的文件夹进行提交。</p><p>（2）若情况1不行的话在<strong>得到允许的情况下</strong>可以用任务管理器强行断掉运行进程。</p><ol start="5"><li><p><strong>freopen(…)一定不能忘，考试结束前5分钟不要干别的，就只需要且只能去检查它，fclose(…)可以忘，但它不行。</strong></p></li><li><p>不开 <code>long long</code> 见祖宗。<del>（经验之谈）</del></p></li><li><p>在交之前将显示文件后缀打开，千万不要将 “–.cpp” 交成 “–.cpp.cpp” 。</p></li></ol><p>注：千万千万不要交成“.exe”结尾的运行文件，交错就连哭的地方都没了。</p><h2 id="四，总结"><a href="#四，总结" class="headerlink" title="四，总结"></a>四，总结</h2><ol><li><p>不要自弃，相信自己的实力，不然你是如何走到现在的？对吧。</p></li><li><p>细心，细心，还是细心，只要正常发挥即可无悔于我，无悔于青春。</p></li><li><p>心态好， <del>（我不会你也别想会）</del> 不会时只要暴力，相信自己的经验，和垒码的直觉。</p></li><li><p><strong>不要想也不要去做出任何形式的作弊。</strong> 一旦出现类似情况，轻者长期禁赛，重者代表的学校上下三届禁赛三年，断了全校OI的路。</p></li></ol><h3 id="五，点个关注不迷路"><a href="#五，点个关注不迷路" class="headerlink" title="五，点个关注不迷路"></a>五，点个关注不迷路</h3><p><a href="https://www.luogu.com.cn/user/528013#main">作者主页</a></p><h1 id="致我们奋斗的青春"><a href="#致我们奋斗的青春" class="headerlink" title="致我们奋斗的青春"></a>致我们奋斗的青春</h1>]]></content>
    
    
    
    <tags>
      
      <tag>OI生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>游览器推荐</title>
    <link href="/myblog/2023/10/15/%E6%B8%B8%E8%A7%88%E5%99%A8%E6%8E%A8%E8%8D%90/"/>
    <url>/myblog/2023/10/15/%E6%B8%B8%E8%A7%88%E5%99%A8%E6%8E%A8%E8%8D%90/</url>
    
    <content type="html"><![CDATA[<h2 id="游览器推荐"><a href="#游览器推荐" class="headerlink" title="游览器推荐"></a>游览器推荐</h2><h3 id="由于电脑沾的比较多，所用的软件也多，原来的不知道用什么游览器现在看来也迎刃而解了。"><a href="#由于电脑沾的比较多，所用的软件也多，原来的不知道用什么游览器现在看来也迎刃而解了。" class="headerlink" title="由于电脑沾的比较多，所用的软件也多，原来的不知道用什么游览器现在看来也迎刃而解了。"></a>由于电脑沾的比较多，所用的软件也多，原来的不知道用什么游览器现在看来也迎刃而解了。</h3><p>我便来给大家推荐一些游览器，以防不知道用什么好。</p><h2 id="NO-1-微软-Microsoft-Edge"><a href="#NO-1-微软-Microsoft-Edge" class="headerlink" title="NO.1 微软 Microsoft Edge"></a>NO.1 微软 Microsoft Edge</h2><p>简称“ED游览器”。</p><h3 id="适用系统："><a href="#适用系统：" class="headerlink" title="适用系统："></a>适用系统：</h3><p>win7/win10（其他的没试）</p><p>由于<strong>win7暂停服务</strong>，所以不再更新，但仍可以使用。</p><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><ol><li><p><strong>搜索很全</strong>，网址栏也可以用bing搜，很方便。</p></li><li><p>可以登微软账户（邮箱就行），可以<strong>同步用户设置和游览书签</strong>等。</p></li><li><p>界面简洁，无弹窗广告和游览广告。</p></li><li><p>下载有官方，防捆绑。</p></li><li><p>自带的<strong>翻译</strong>很快，很准 <del>，很狠</del> 。</p></li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>在有的机房连接不到微软，因为网络堪忧。</p><h2 id="NO-2-Google-Chrome"><a href="#NO-2-Google-Chrome" class="headerlink" title="NO.2 Google Chrome"></a>NO.2 Google Chrome</h2><p>又叫“谷歌游览器”。</p><h3 id="适用系统"><a href="#适用系统" class="headerlink" title="适用系统"></a>适用系统</h3><p>win7/win10（其他的没试）</p><p>正在持续更新。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li><p>一直在持续更新。</p></li><li><p>无捆绑，弹窗，广告。</p></li><li><p>加载很快。</p></li><li><p><strong>兼容绝大部分网站</strong>。</p></li></ol><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><p>同 ED游览器</p><h2 id="NO-3-Firefox"><a href="#NO-3-Firefox" class="headerlink" title="NO.3 Firefox"></a>NO.3 Firefox</h2><p>中文叫“火狐游览器”</p><p>这是我<strong>最推荐</strong>在机房使用的游览器</p><h3 id="适用系统-1"><a href="#适用系统-1" class="headerlink" title="适用系统"></a>适用系统</h3><p>win7/win10（其他的没试）</p><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ol><li><p>在机房连不上bing时会用baidu。<del>（除非你非选）</del></p></li><li><p>下载快，最多两分钟，无捆绑。</p></li><li><p><strong>无弹窗，无广告。</strong></p></li><li><p>使用方便，界面整洁，<strong>可以自定义</strong>。</p></li><li><p><strong>支持众多插件</strong>。</p></li></ol><h3 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h3><p>在某些性能方面不如 ED游览器 和 火狐游览器。</p><h2 id="NO-4-360游览器"><a href="#NO-4-360游览器" class="headerlink" title="NO.4 360游览器"></a>NO.4 360游览器</h2><p>可以说成“360全家桶”</p><h3 id="适用系统-2"><a href="#适用系统-2" class="headerlink" title="适用系统"></a>适用系统</h3><p>win7/win10（你懂的）</p><h3 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h3><ol><li><p><strong>全中文</strong>游览器。（包括官方）</p></li><li><p>搜索，游览功能强大。</p></li><li><p>使用方便。</p></li></ol><h3 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h3><p>会自带“360安全卫士”，“360软件管家”，“360小程序中心”，“360游戏管家”，“鲁大师”等一系列<strong>捆绑软件</strong>。</p><h2 id="NO-5-flash中心"><a href="#NO-5-flash中心" class="headerlink" title="NO.5 flash中心"></a>NO.5 flash中心</h2><p>其实它并<strong>不是一个游览器</strong>，却有游览器的功能</p><h3 id="适用-优点"><a href="#适用-优点" class="headerlink" title="适用 优点"></a><del>适用</del> 优点</h3><ol><li><p>可以游览所有带<strong>flash插件</strong>的网页，这是其他游览器做不到的。</p></li><li><p>玩游戏方便。</p></li></ol><h3 id="缺点-4"><a href="#缺点-4" class="headerlink" title="缺点"></a>缺点</h3><p>缺少大部分游览器所需的东西，如插件。</p><p>毕竟它并不是一个正规游览器，而是flash下载中心。</p><h5 id="好了，下面就没了。"><a href="#好了，下面就没了。" class="headerlink" title="好了，下面就没了。"></a>好了，下面就没了。</h5><h4 id="点个关注不迷路"><a href="#点个关注不迷路" class="headerlink" title="点个关注不迷路"></a>点个关注不迷路</h4><p><a href="https://www.luogu.com.cn/user/528013">作者主页</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>实用技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STL容器之queue</title>
    <link href="/myblog/2023/10/15/STL%E5%AE%B9%E5%99%A8%E4%B9%8Bqueue/"/>
    <url>/myblog/2023/10/15/STL%E5%AE%B9%E5%99%A8%E4%B9%8Bqueue/</url>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>继 vector 容器之后的 队列 queue。</p><p>STL 容器只有一个是不够的，现在便介绍一下关于 STL 中的 queue 容器</p><h2 id="queue队列"><a href="#queue队列" class="headerlink" title="queue队列"></a>queue队列</h2><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><p>人如其名，这个 queue 容器也像它的名字一样在实际模型上是一个队列。</p><h4 id="进入它的元素都会遵循一个原则：-先进先出"><a href="#进入它的元素都会遵循一个原则：-先进先出" class="headerlink" title="进入它的元素都会遵循一个原则： 先进先出"></a>进入它的元素都会遵循一个原则： 先进先出</h4><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/f05x7bni.png?x-oss-process=image/resize,m_lfit,h_170,w_225"></p><p>每个插入的元素都会到队列的末尾，依次返回的则是队伍开头元素。</p><p>所以它的实际模型就类似一个队伍在排队，每个进入队伍的最后，在队伍开头被访问后离开。</p><p>队首即队列的第一项，队尾即队列的最后一项。</p><p>（值得注意的是：队列的中间元素<del>应该</del>是不能访问的）</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>举个实际的例子如下</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-comment">//队列的头文件 </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><br><span class="hljs-comment">//使用大部分STL容器需要定义命名空间</span><br><span class="hljs-comment">//queue便是其中之一 </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//queue&lt;数据类型&gt;队列名 </span><br>queue &lt;<span class="hljs-type">int</span>&gt; q;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{<br><br><span class="hljs-comment">//依次存入1 5 3 4 2 </span><br>q.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);<br>q.<span class="hljs-built_in">push</span>(<span class="hljs-number">5</span>);<br>q.<span class="hljs-built_in">push</span>(<span class="hljs-number">3</span>);<br>q.<span class="hljs-built_in">push</span>(<span class="hljs-number">4</span>);<br>q.<span class="hljs-built_in">push</span>(<span class="hljs-number">2</span>);<br><br><span class="hljs-comment">//循环输出，直至队列为空 </span><br><span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>()){<br><br><span class="hljs-comment">//输出位于队首的元素 </span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,q.<span class="hljs-built_in">front</span>());<br><br><span class="hljs-comment">//弹出队首元素 </span><br>q.<span class="hljs-built_in">pop</span>();<br><br>}<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>} <br></code></pre></td></tr></tbody></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h3 id="1-push"><a href="#1-push" class="headerlink" title="1.push()"></a>1.push()</h3><h4 id="使用-push-函数可以在队列的末尾插入一个相应类型的元素。"><a href="#使用-push-函数可以在队列的末尾插入一个相应类型的元素。" class="headerlink" title="使用 push() 函数可以在队列的末尾插入一个相应类型的元素。"></a>使用 push() 函数可以在队列的末尾插入一个相应类型的元素。</h4><p> <em>所有的容器既然作为容器，那么它就必然要有相应的用途，如果连元素都放不了，那它算什么容器？</em> </p><p>（几乎所有的 STL 容器 的元素插入都有一个函数，像 vector 的 push_back() 函数， stack 的 push() 函数）</p><h3 id="2-pop"><a href="#2-pop" class="headerlink" title="2.pop()"></a>2.pop()</h3><h4 id="pop-函数-可以弹出位于队首的元素"><a href="#pop-函数-可以弹出位于队首的元素" class="headerlink" title="pop() 函数 可以弹出位于队首的元素"></a>pop() 函数 可以弹出位于队首的元素</h4><h3 id="3-front"><a href="#3-front" class="headerlink" title="3.front()"></a>3.front()</h3><h4 id="front-函数可以获取位于队首的元素。"><a href="#front-函数可以获取位于队首的元素。" class="headerlink" title="front() 函数可以获取位于队首的元素。"></a>front() 函数可以获取位于队首的元素。</h4><p>与 push() 函数 和 pop() 函数 共同属于使用 queue 队列的必要函数。</p><p>在函数中还有一个可以获取队尾元素的函数： back()，但在一般情况下不会使用；</p><p>不要与 back() 函数 记混，要记住队列是尾进头出。</p><h3 id="4-empty"><a href="#4-empty" class="headerlink" title="4.empty()"></a>4.empty()</h3><h4 id="判断队列是否为空：为空时，返回-false（0）；否则返回-true（1）。"><a href="#判断队列是否为空：为空时，返回-false（0）；否则返回-true（1）。" class="headerlink" title="判断队列是否为空：为空时，返回 false（0）；否则返回 true（1）。"></a>判断队列是否为空：为空时，返回 false（0）；否则返回 true（1）。</h4><h3 id="5-size"><a href="#5-size" class="headerlink" title="5.size()"></a>5.size()</h3><h4 id="返回一个整数表示当前队列中元素的数量"><a href="#返回一个整数表示当前队列中元素的数量" class="headerlink" title="返回一个整数表示当前队列中元素的数量"></a>返回一个整数表示当前队列中元素的数量</h4><p>在一般情况下可用 empty() 替换，以达到输出队列中的全部元素</p><h3 id="常用的函数大致就是这些了"><a href="#常用的函数大致就是这些了" class="headerlink" title="常用的函数大致就是这些了"></a>常用的函数大致就是这些了</h3><h4 id="现在回过头来看位于博文开头的那个代码想必你也能理解了"><a href="#现在回过头来看位于博文开头的那个代码想必你也能理解了" class="headerlink" title="现在回过头来看位于博文开头的那个代码想必你也能理解了"></a>现在回过头来看位于博文开头的那个代码想必你也能理解了</h4><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-comment">//队列的头文件 </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><br><span class="hljs-comment">//使用大部分STL容器需要定义命名空间</span><br><span class="hljs-comment">//queue便是其中之一 </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//queue&lt;数据类型&gt;队列名 </span><br>queue &lt;<span class="hljs-type">int</span>&gt; q;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{<br><br><span class="hljs-comment">//依次存入1 5 3 4 2 </span><br>q.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);<br>q.<span class="hljs-built_in">push</span>(<span class="hljs-number">5</span>);<br>q.<span class="hljs-built_in">push</span>(<span class="hljs-number">3</span>);<br>q.<span class="hljs-built_in">push</span>(<span class="hljs-number">4</span>);<br>q.<span class="hljs-built_in">push</span>(<span class="hljs-number">2</span>);<br><br><span class="hljs-comment">//循环输出，直至队列为空 </span><br>   <span class="hljs-comment">//可用(q.size())替换</span><br><span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>()){<br><br><span class="hljs-comment">//输出位于队首的元素 </span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,q.<span class="hljs-built_in">front</span>());<br><br><span class="hljs-comment">//弹出队首元素 </span><br>q.<span class="hljs-built_in">pop</span>();<br><br>}<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>} <br></code></pre></td></tr></tbody></table></figure><p>这次的STL容器——queue队列就到这里了，要知道有一个特殊的队列叫优先队列，那就分开下次再讲吧。</p><h3 id="CSP加油！！！"><a href="#CSP加油！！！" class="headerlink" title="CSP加油！！！"></a>CSP加油！！！</h3>]]></content>
    
    
    
    <tags>
      
      <tag>STL容器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STL容器之vector</title>
    <link href="/myblog/2023/10/15/STL%E5%AE%B9%E5%99%A8%E4%B9%8Bvector/"/>
    <url>/myblog/2023/10/15/STL%E5%AE%B9%E5%99%A8%E4%B9%8Bvector/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本人蒟蒻，为CSP初赛准备，写下此篇，不足<del>应该</del>会补。<br>不对请 <del>别骂</del> 指出。</p><h1 id="vector数组"><a href="#vector数组" class="headerlink" title="vector数组"></a>vector数组</h1><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><p>这是一个可以根据实际的使用大小而使数组范围进行改变的数组。</p><p>可以理解为随意变长变短的数组，但动态所占用的空间为普通数组的两倍，适合用于无法确定数组应开大小的情况下使用。</p><p>需要用到 &lt; vector &gt; 头文件</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>在c++中使用如下方法进行定义：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">//需定义命名空间 才可使用vector容器 </span><br><br>vector&lt;<span class="hljs-type">int</span>&gt;p;<br><span class="hljs-comment">//vector&lt;数据类型/容器&gt;变量名;</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{<br><br><span class="hljs-type">int</span> x;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;x);<br>p.<span class="hljs-built_in">push_back</span>(x);<br><span class="hljs-comment">//在p中存入x</span><br><span class="hljs-comment">//等价于p.emplace(x);</span><br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>,p[<span class="hljs-number">0</span>]);<br><span class="hljs-comment">//注意：vector容器下标从0开始 </span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>} <br></code></pre></td></tr></tbody></table></figure><p>在vector容器定义数据类型时可以是常见的 int 、 double 等数据类型，也可以是包括其本身的容器，亦或是结构体。</p><p>（像上面的例子便是在一维上的滑动，也可以定义成二维数组，可以是向一边延伸或向两边延伸，以此类推…）</p><p>例如：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>vector &lt;<span class="hljs-type">int</span>&gt; t;<span class="hljs-comment">//我是一维的 </span><br><br>vector &lt;<span class="hljs-type">int</span>&gt; p1[<span class="hljs-number">100</span>];<br><span class="hljs-comment">//大概为p[100][***(可延长)]</span><br><span class="hljs-comment">//这是一维固定、一维可延伸的情况</span><br><br>vector &lt;vector&lt;<span class="hljs-type">int</span>&gt; &gt;p2;<br><span class="hljs-comment">//大概为p[***(可延长)][***(可延长)] </span><br><span class="hljs-comment">//这是二维都可延伸的情况 </span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">注： </span><br><span class="hljs-comment">可以看到我并未将两个"&gt;"连接起来</span><br><span class="hljs-comment">若连起来编译器会将其视为：位运算“右移”行为 </span><br><span class="hljs-comment">*/</span> <br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{<br><span class="hljs-comment">//输入 </span><br><span class="hljs-type">int</span> x;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;x);<br><br><span class="hljs-comment">//存入p1 </span><br>p1[<span class="hljs-number">0</span>].<span class="hljs-built_in">push_back</span>(x);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,p1[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]);<br><br><span class="hljs-comment">//存入p2 </span><br><span class="hljs-comment">//vector中存储的类型(或容器)必须与定义中的一致</span><br>t.<span class="hljs-built_in">push_back</span>(x);<br>p2.<span class="hljs-built_in">push_back</span>(t);<br> <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,p2[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>} <br></code></pre></td></tr></tbody></table></figure><h2 id="使用函数"><a href="#使用函数" class="headerlink" title="使用函数"></a>使用函数</h2><h3 id="1-push-back"><a href="#1-push-back" class="headerlink" title="1.push_back()"></a>1.push_back()</h3><p>或许在你一点也不了解这个函数的情况下是很难读懂上面两个例子的 <del>（如果你知道就当我没说）</del></p><p>没关系，让我们一起走进 vector</p><h4 id="push-back-是-vector-中自带的函数，它表示在当前-vector-容器的末尾添加一个元素。"><a href="#push-back-是-vector-中自带的函数，它表示在当前-vector-容器的末尾添加一个元素。" class="headerlink" title="push_back()是 < vector > 中自带的函数，它表示在当前 vector 容器的末尾添加一个元素。"></a>push_back()是 &lt; vector &gt; 中自带的函数，它表示在当前 vector 容器的末尾添加一个元素。</h4><h4 id="它（包括好多STL容器）的运用都类似于访问结构体的某一个元素，是以-“-”-进行连接容器和函数的。"><a href="#它（包括好多STL容器）的运用都类似于访问结构体的某一个元素，是以-“-”-进行连接容器和函数的。" class="headerlink" title="它（包括好多STL容器）的运用都类似于访问结构体的某一个元素，是以 “.” 进行连接容器和函数的。"></a>它（包括好多STL容器）的运用都类似于访问结构体的某一个元素，是以 “.” 进行连接容器和函数的。</h4><p>就拿我们上面的例子重新解读一下来看</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>vector &lt;<span class="hljs-type">int</span>&gt; p;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{<br><br>   <span class="hljs-comment">//我们需要一个变量以供输入</span><br><span class="hljs-type">int</span> x;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;x);<br>    <br>   <span class="hljs-comment">//将x插入到p这个vector的末尾</span><br>p.<span class="hljs-built_in">push_back</span>(x);<br><br>   <span class="hljs-comment">//最后像普通数组一样输出</span><br>   <span class="hljs-comment">//下标从0开始</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>,p[<span class="hljs-number">0</span>]);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>} <br></code></pre></td></tr></tbody></table></figure><p>这就是 push_back() 函数的用途了，在使用它的时候是不必考虑数组的大小的，它会自动分配地址，做到随用随拿。</p><p>在函数中有一个与 push_back() 函数功能相同的函数 emplace() ，只要知道用法相同便好。</p><h3 id="2-size"><a href="#2-size" class="headerlink" title="2.size()"></a>2.size()</h3><p>在大多数使用 vector 容器的代码中都可以看见这个函数，它的意思就像它所翻译的一样。</p><h4 id="使用size-函数可以快速获取当前-vector-容器中元素的个数，返回值为-int-型整数。"><a href="#使用size-函数可以快速获取当前-vector-容器中元素的个数，返回值为-int-型整数。" class="headerlink" title="使用size()函数可以快速获取当前 vector 容器中元素的个数，返回值为 int 型整数。"></a>使用size()函数可以快速获取当前 vector 容器中元素的个数，返回值为 int 型整数。</h4><p>例如，我们可以在未记录 vector 中有多少元素时利用它输出 vector 容器中的所有元素：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//随机数头文件 </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-comment">//时间头文件 </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;time.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>vector &lt;<span class="hljs-type">int</span>&gt; q;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{<br><br><span class="hljs-comment">//生成一个三十以内的随机数 </span><br><span class="hljs-built_in">srand</span>(<span class="hljs-built_in">time</span>(<span class="hljs-literal">NULL</span>));<br><span class="hljs-type">int</span> n=<span class="hljs-built_in">rand</span>()%<span class="hljs-number">31</span>;<br><br><span class="hljs-comment">//将0~n存入vector容器q中 </span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=n;i++){<br>q.<span class="hljs-built_in">push_back</span>(i);<br>} <br><br><span class="hljs-comment">//自行输出至最后（即下标小于总数量） </span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">由于vector容器左闭右开</span><br><span class="hljs-comment">下标从0开始（重要的事情说三遍） </span><br><span class="hljs-comment">所以是“i&lt;q.size()” </span><br><span class="hljs-comment">*/</span> <br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;q.<span class="hljs-built_in">size</span>();i++){<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,q[i]);<br>}<br><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>注：一定不要用 vector 直接在未定义的下标下进行操作，不然会出问题。</p><h3 id="3-pop-back"><a href="#3-pop-back" class="headerlink" title="3.pop_back()"></a>3.pop_back()</h3><h4 id="使用它可以弹出-vector-数组中的最后一个元素，即删除最后一个元素"><a href="#使用它可以弹出-vector-数组中的最后一个元素，即删除最后一个元素" class="headerlink" title="使用它可以弹出 vector 数组中的最后一个元素，即删除最后一个元素"></a>使用它可以弹出 vector 数组中的最后一个元素，即删除最后一个元素</h4><p>类似于后面会讲的在 stack 容器（栈）和 queue 容器（队列）中的 pop() 函数。</p><h3 id="4-erase"><a href="#4-erase" class="headerlink" title="4.erase()"></a>4.erase()</h3><h4 id="由于-vector-容器下的迭代器是有特定指向的，所以我们可以以迭代器的形式对-vector-数组进行一定的操作。现在要讲的-erase-便是要用到迭代器进行操作的。"><a href="#由于-vector-容器下的迭代器是有特定指向的，所以我们可以以迭代器的形式对-vector-数组进行一定的操作。现在要讲的-erase-便是要用到迭代器进行操作的。" class="headerlink" title="由于 vector 容器下的迭代器是有特定指向的，所以我们可以以迭代器的形式对 vector 数组进行一定的操作。现在要讲的 erase() 便是要用到迭代器进行操作的。"></a>由于 vector 容器下的迭代器是有特定指向的，所以我们可以以迭代器的形式对 vector 数组进行一定的操作。现在要讲的 erase() 便是要用到迭代器进行操作的。</h4><p>在数组中或许会进行删除数据的操作，但我们不能只删除末尾的元素， erase() 函数则可以弥补 pop 的不足。</p><p>erase() 函数有两种使用方法，一种是删除单个元素，另一种是删除连续一串元素。</p><h4 id="删除单个元素"><a href="#删除单个元素" class="headerlink" title="删除单个元素"></a>删除单个元素</h4><p>erase( 某一元素迭代器 );</p><p>以 begin 函数可以获取属于 vector 容器下标为 0 的那个元素的迭代器。</p><p>删除元素的例子如下</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>vector &lt;<span class="hljs-type">int</span>&gt; q;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{<br><br><span class="hljs-comment">//将数字0~10放入vector容器q中 </span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">10</span>;i++){<br>q.<span class="hljs-built_in">push_back</span>(i);<br>}<br><br><span class="hljs-comment">//进行从下标零到末尾的输出 </span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;q.<span class="hljs-built_in">size</span>();i++){<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,q[i]);<br>}<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);<br><br><span class="hljs-comment">//输入要删除的元素 </span><br><span class="hljs-type">int</span> n;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n);<br><br><span class="hljs-comment">//删除下标为n的元素 </span><br>q.<span class="hljs-built_in">erase</span>(q.<span class="hljs-built_in">begin</span>()+n);<br><br><span class="hljs-comment">//输出 </span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;q.<span class="hljs-built_in">size</span>();i++){<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,q[i]);<br>}<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">运行后可以发现</span><br><span class="hljs-comment">在输入0~10的情况下会删除相应下标的元素</span><br><span class="hljs-comment">并进行补齐</span><br><span class="hljs-comment">这就是 erase() 函数的单个元素删除功能</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></tbody></table></figure><h3 id="删除连续一串元素"><a href="#删除连续一串元素" class="headerlink" title="删除连续一串元素"></a>删除连续一串元素</h3><p>删除连续一串元素的方法和删除单个元素的方法大致相同。</p><p>erase( 要删除元素开头的迭代器 , 要删除元素末尾的迭代器 );</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>vector &lt;<span class="hljs-type">int</span>&gt; q;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{<br><br><span class="hljs-comment">//将数字0~10放入vector容器q中 </span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">10</span>;i++){<br>q.<span class="hljs-built_in">push_back</span>(i);<br>}<br><br><span class="hljs-comment">//进行从下标零到末尾的输出 </span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;q.<span class="hljs-built_in">size</span>();i++){<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,q[i]);<br>}<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);<br><br><span class="hljs-comment">//输入要删除元素开头下标及长度 </span><br><span class="hljs-type">int</span> n,len;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>,&amp;n,&amp;len);<br><br><span class="hljs-comment">//删除下标为n的元素 </span><br>q.<span class="hljs-built_in">erase</span>(q.<span class="hljs-built_in">begin</span>()+n,q.<span class="hljs-built_in">begin</span>()+n+len);<br><br><span class="hljs-comment">//输出 </span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;q.<span class="hljs-built_in">size</span>();i++){<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,q[i]);<br>}<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>以 end() 函数可以获取 vector 容器末尾元素的迭代器，我们可以和 erase() 函数配合使用以达到清空 vector 容器的目的。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>vector &lt;<span class="hljs-type">int</span>&gt; q;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{<br><br><span class="hljs-comment">//将数字0~10放入vector容器q中 </span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">10</span>;i++){<br>q.<span class="hljs-built_in">push_back</span>(i);<br>}<br><br><span class="hljs-comment">//进行从下标零到末尾的输出 </span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;q.<span class="hljs-built_in">size</span>();i++){<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,q[i]);<br>}<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);<br><br><span class="hljs-comment">//删除所有的元素 </span><br>q.<span class="hljs-built_in">erase</span>(q.<span class="hljs-built_in">begin</span>(),q.<span class="hljs-built_in">end</span>());<br><br><span class="hljs-comment">//输出  </span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;q.<span class="hljs-built_in">size</span>();i++){<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,q[i]);<br>}<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>在尝试后可以看到由于 vector 容器 q 的元素为空，所以并不会输出更改后的值了。</p><h3 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h3><p>作用与我们上面刚刚看到的删除全部元素一样：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>vector &lt;<span class="hljs-type">int</span>&gt; q;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">10</span>;i++){<br>q.<span class="hljs-built_in">push_back</span>(i);<br>}<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;q.<span class="hljs-built_in">size</span>();i++){<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,q[i]);<br>}<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);<br><br><span class="hljs-comment">//删除所有的元素 </span><br>q.<span class="hljs-built_in">clear</span>(); <br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;q.<span class="hljs-built_in">size</span>();i++){<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,q[i]);<br>}<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>使用它 <del>或许</del> 可以更加快速和便捷的清除 vector 容器中的元素。</p><p>vector 数组 大致就到这里了，更加具体的操作大家可以自行研究，之后我应该也会出其他的 STL 容器的知识点。</p><p>CSP加油！！！</p>]]></content>
    
    
    
    <tags>
      
      <tag>STL容器</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
