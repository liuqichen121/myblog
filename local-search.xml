<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>STL容器之vector</title>
    <link href="/myblog/2023/10/15/STL%E5%AE%B9%E5%99%A8%E4%B9%8Bvector/"/>
    <url>/myblog/2023/10/15/STL%E5%AE%B9%E5%99%A8%E4%B9%8Bvector/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本人蒟蒻，为CSP初赛准备，写下此篇，不足<del>应该</del>会补。<br>不对请 <del>别骂</del> 指出。</p><h1 id="vector数组"><a href="#vector数组" class="headerlink" title="vector数组"></a>vector数组</h1><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><p>这是一个可以根据实际的使用大小而使数组范围进行改变的数组。</p><p>可以理解为随意变长变短的数组，但动态所占用的空间为普通数组的两倍，适合用于无法确定数组应开大小的情况下使用。</p><p>需要用到 &lt; vector &gt; 头文件</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>在c++中使用如下方法进行定义：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//需定义命名空间 才可使用vector容器 </span></span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;p;</span><br><span class="line"><span class="comment">//vector&lt;数据类型/容器&gt;变量名;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">p.<span class="built_in">push_back</span>(x);</span><br><span class="line"><span class="comment">//在p中存入x</span></span><br><span class="line"><span class="comment">//等价于p.emplace(x);</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,p[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//注意：vector容器下标从0开始 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>在vector容器定义数据类型时可以是常见的 int 、 double 等数据类型，也可以是包括其本身的容器，亦或是结构体。</p><p>（像上面的例子便是在一维上的滑动，也可以定义成二维数组，可以是向一边延伸或向两边延伸，以此类推…）</p><p>例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">vector &lt;<span class="type">int</span>&gt; t;<span class="comment">//我是一维的 </span></span><br><span class="line"></span><br><span class="line">vector &lt;<span class="type">int</span>&gt; p1[<span class="number">100</span>];</span><br><span class="line"><span class="comment">//大概为p[100][***(可延长)]</span></span><br><span class="line"><span class="comment">//这是一维固定、一维可延伸的情况</span></span><br><span class="line"></span><br><span class="line">vector &lt;vector&lt;<span class="type">int</span>&gt; &gt;p2;</span><br><span class="line"><span class="comment">//大概为p[***(可延长)][***(可延长)] </span></span><br><span class="line"><span class="comment">//这是二维都可延伸的情况 </span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">注： </span></span><br><span class="line"><span class="comment">可以看到我并未将两个&quot;&gt;&quot;连接起来</span></span><br><span class="line"><span class="comment">若连起来编译器会将其视为：位运算“右移”行为 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//输入 </span></span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line"></span><br><span class="line"><span class="comment">//存入p1 </span></span><br><span class="line">p1[<span class="number">0</span>].<span class="built_in">push_back</span>(x);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,p1[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//存入p2 </span></span><br><span class="line"><span class="comment">//vector中存储的类型(或容器)必须与定义中的一致</span></span><br><span class="line">t.<span class="built_in">push_back</span>(x);</span><br><span class="line">p2.<span class="built_in">push_back</span>(t);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,p2[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="使用函数"><a href="#使用函数" class="headerlink" title="使用函数"></a>使用函数</h2><h3 id="1-push-back"><a href="#1-push-back" class="headerlink" title="1.push_back()"></a>1.push_back()</h3><p>或许在你一点也不了解这个函数的情况下是很难读懂上面两个例子的 <del>（如果你知道就当我没说）</del></p><p>没关系，让我们一起走进 vector</p><h4 id="push-back-是-vector-中自带的函数，它表示在当前-vector-容器的末尾添加一个元素。"><a href="#push-back-是-vector-中自带的函数，它表示在当前-vector-容器的末尾添加一个元素。" class="headerlink" title="push_back()是 &lt; vector &gt; 中自带的函数，它表示在当前 vector 容器的末尾添加一个元素。"></a>push_back()是 &lt; vector &gt; 中自带的函数，它表示在当前 vector 容器的末尾添加一个元素。</h4><h4 id="它（包括好多STL容器）的运用都类似于访问结构体的某一个元素，是以-“-”-进行连接容器和函数的。"><a href="#它（包括好多STL容器）的运用都类似于访问结构体的某一个元素，是以-“-”-进行连接容器和函数的。" class="headerlink" title="它（包括好多STL容器）的运用都类似于访问结构体的某一个元素，是以 “.” 进行连接容器和函数的。"></a>它（包括好多STL容器）的运用都类似于访问结构体的某一个元素，是以 “.” 进行连接容器和函数的。</h4><p>就拿我们上面的例子重新解读一下来看</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">vector &lt;<span class="type">int</span>&gt; p;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//我们需要一个变量以供输入</span></span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    </span><br><span class="line">   <span class="comment">//将x插入到p这个vector的末尾</span></span><br><span class="line">p.<span class="built_in">push_back</span>(x);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//最后像普通数组一样输出</span></span><br><span class="line">   <span class="comment">//下标从0开始</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,p[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这就是 push_back() 函数的用途了，在使用它的时候是不必考虑数组的大小的，它会自动分配地址，做到随用随拿。</p><p>在函数中有一个与 push_back() 函数功能相同的函数 emplace() ，只要知道用法相同便好。</p><h3 id="2-size"><a href="#2-size" class="headerlink" title="2.size()"></a>2.size()</h3><p>在大多数使用 vector 容器的代码中都可以看见这个函数，它的意思就像它所翻译的一样。</p><h4 id="使用size-函数可以快速获取当前-vector-容器中元素的个数，返回值为-int-型整数。"><a href="#使用size-函数可以快速获取当前-vector-容器中元素的个数，返回值为-int-型整数。" class="headerlink" title="使用size()函数可以快速获取当前 vector 容器中元素的个数，返回值为 int 型整数。"></a>使用size()函数可以快速获取当前 vector 容器中元素的个数，返回值为 int 型整数。</h4><p>例如，我们可以在未记录 vector 中有多少元素时利用它输出 vector 容器中的所有元素：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//随机数头文件 </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//时间头文件 </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">vector &lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成一个三十以内的随机数 </span></span><br><span class="line"><span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"><span class="type">int</span> n=<span class="built_in">rand</span>()%<span class="number">31</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将0~n存入vector容器q中 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">q.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//自行输出至最后（即下标小于总数量） </span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">由于vector容器左闭右开</span></span><br><span class="line"><span class="comment">下标从0开始（重要的事情说三遍） </span></span><br><span class="line"><span class="comment">所以是“i&lt;q.size()” </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;q.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,q[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：一定不要用 vector 直接在未定义的下标下进行操作，不然会出问题。</p><h3 id="3-pop-back"><a href="#3-pop-back" class="headerlink" title="3.pop_back()"></a>3.pop_back()</h3><h4 id="使用它可以弹出-vector-数组中的最后一个元素，即删除最后一个元素"><a href="#使用它可以弹出-vector-数组中的最后一个元素，即删除最后一个元素" class="headerlink" title="使用它可以弹出 vector 数组中的最后一个元素，即删除最后一个元素"></a>使用它可以弹出 vector 数组中的最后一个元素，即删除最后一个元素</h4><p>类似于后面会讲的在 stack 容器（栈）和 queue 容器（队列）中的 pop() 函数。</p><h3 id="4-erase"><a href="#4-erase" class="headerlink" title="4.erase()"></a>4.erase()</h3><h4 id="由于-vector-容器下的迭代器是有特定指向的，所以我们可以以迭代器的形式对-vector-数组进行一定的操作。现在要讲的-erase-便是要用到迭代器进行操作的。"><a href="#由于-vector-容器下的迭代器是有特定指向的，所以我们可以以迭代器的形式对-vector-数组进行一定的操作。现在要讲的-erase-便是要用到迭代器进行操作的。" class="headerlink" title="由于 vector 容器下的迭代器是有特定指向的，所以我们可以以迭代器的形式对 vector 数组进行一定的操作。现在要讲的 erase() 便是要用到迭代器进行操作的。"></a>由于 vector 容器下的迭代器是有特定指向的，所以我们可以以迭代器的形式对 vector 数组进行一定的操作。现在要讲的 erase() 便是要用到迭代器进行操作的。</h4><p>在数组中或许会进行删除数据的操作，但我们不能只删除末尾的元素， erase() 函数则可以弥补 pop 的不足。</p><p>erase() 函数有两种使用方法，一种是删除单个元素，另一种是删除连续一串元素。</p><h4 id="删除单个元素"><a href="#删除单个元素" class="headerlink" title="删除单个元素"></a>删除单个元素</h4><p>erase( 某一元素迭代器 );</p><p>以 begin 函数可以获取属于 vector 容器下标为 0 的那个元素的迭代器。</p><p>删除元素的例子如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">vector &lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将数字0~10放入vector容器q中 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">q.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进行从下标零到末尾的输出 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;q.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,q[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输入要删除的元素 </span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除下标为n的元素 </span></span><br><span class="line">q.<span class="built_in">erase</span>(q.<span class="built_in">begin</span>()+n);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;q.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,q[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">运行后可以发现</span></span><br><span class="line"><span class="comment">在输入0~10的情况下会删除相应下标的元素</span></span><br><span class="line"><span class="comment">并进行补齐</span></span><br><span class="line"><span class="comment">这就是 erase() 函数的单个元素删除功能</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="删除连续一串元素"><a href="#删除连续一串元素" class="headerlink" title="删除连续一串元素"></a>删除连续一串元素</h3><p>删除连续一串元素的方法和删除单个元素的方法大致相同。</p><p>erase( 要删除元素开头的迭代器 , 要删除元素末尾的迭代器 );</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">vector &lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将数字0~10放入vector容器q中 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">q.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进行从下标零到末尾的输出 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;q.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,q[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输入要删除元素开头下标及长度 </span></span><br><span class="line"><span class="type">int</span> n,len;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;len);</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除下标为n的元素 </span></span><br><span class="line">q.<span class="built_in">erase</span>(q.<span class="built_in">begin</span>()+n,q.<span class="built_in">begin</span>()+n+len);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;q.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,q[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以 end() 函数可以获取 vector 容器末尾元素的迭代器，我们可以和 erase() 函数配合使用以达到清空 vector 容器的目的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">vector &lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将数字0~10放入vector容器q中 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">q.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进行从下标零到末尾的输出 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;q.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,q[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除所有的元素 </span></span><br><span class="line">q.<span class="built_in">erase</span>(q.<span class="built_in">begin</span>(),q.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出  </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;q.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,q[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在尝试后可以看到由于 vector 容器 q 的元素为空，所以并不会输出更改后的值了。</p><h3 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h3><p>作用与我们上面刚刚看到的删除全部元素一样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">vector &lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">q.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;q.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,q[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除所有的元素 </span></span><br><span class="line">q.<span class="built_in">clear</span>(); </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;q.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,q[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用它 <del>或许</del> 可以更加快速和便捷的清除 vector 容器中的元素。</p><p>vector 数组 大致就到这里了，更加具体的操作大家可以自行研究，之后我应该也会出其他的 STL 容器的知识点。</p><p>CSP加油！！！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/myblog/2023/10/15/hello-world/"/>
    <url>/myblog/2023/10/15/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
